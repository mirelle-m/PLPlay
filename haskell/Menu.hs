module Menu where
import System.Directory (doesFileExist)
import Control.Concurrent (threadDelay)
import Data.List (isInfixOf)

-- imports de outros modulos
import Utils (centralizar, limparTela, terminalWidth)
import Navegacao (escolherOpcao)
import MapaMissoes (imprimirMapa, escolherMissao)
import Inicial (paginaInicial)


executarAplicacao :: IO ()
executarAplicacao = do
    paginaInicial
    authSuccess <- autenticar
    if authSuccess
        then do
            menuPrincipal
        else
            putStrLn "‚ùå Falha na autentica√ß√£o."


menuPrincipal :: IO ()
menuPrincipal = do
    let largura = terminalWidth
    let opcoes = [ "üéÆ Iniciar Novo Jogo"
                 , "üì∞ Ver Regras do Jogo"
                 , "üó∫Ô∏è  Ver Mapa de Miss√µes"
                 , "üíæ Continuar Jogo"
                 , "üö™ Sair"
                 ]

    putStrLn $ replicate largura '='
    putStrLn $ centralizar largura "MENU PRINCIPAL"
    putStrLn $ replicate largura '='
    escolha <- escolherOpcao opcoes

    case escolha of
        0 -> do
            putStrLn "Iniciando novo jogo..."
            missao <- escolherMissao
            -- colocar funcao para realizar o que foi desejado
            putStrLn $ "\nüöÄ Voc√™ selecionou: " ++ missao
            menuPrincipal
        1 -> do
            putStrLn "Mostrando Regras do jogo..."
            -- colocar funcao para realizar o que foi desejado
            mostrarRegrasJogo
            menuPrincipal
        2 -> do
            putStrLn "Mostrando Mapa de Miss√µes"
            imprimirMapa
            menuPrincipal
        3 -> do
            putStrLn "Continuando jogo"
            missao <- escolherMissao
            putStrLn $ "\nüöÄ Voc√™ selecionou: " ++ missao
            menuPrincipal
        4 -> do
            putStrLn "Saindo do jogo... At√© a pr√≥xima! üëã"
        _ -> putStrLn "Op√ß√£o inv√°lida."

-- Retorna True se autenticado ou cadastrado com sucesso
autenticar :: IO Bool
autenticar = do
    let largura = terminalWidth
    putStrLn $ replicate largura '='
    putStrLn $ centralizar largura "üîê AUTENTICA√á√ÉO"
    putStrLn $ replicate largura '='
    putStrLn "Digite seu username:"
    username <- getLine
    putStrLn "Digite sua senha:"
    _ <- getLine  -- senha n√£o √© usada, mas mantida para o fluxo
    let userData = "username: " ++ username ++ "\nprogresso: Missao3 csharp\n"

    exists <- doesFileExist "user.txt"
    if exists
        then do
            content <- readFile "user.txt"
            if ("username: " ++ username) `isInfixOf` content
                then do
                    putStrLn "‚úÖ Autenticado com sucesso!"
                    return True
                else do
                    putStrLn "Usu√°rio n√£o encontrado. Cadastrando novo usu√°rio..."
                    appendFile "user.txt" userData
                    putStrLn "‚úÖ Cadastro realizado com sucesso!"
                    return True
        else do
            writeFile "user.txt" userData
            putStrLn "Primeiro usu√°rio cadastrado com sucesso!"
            return True



mostrarRegrasJogo:: IO()
mostrarRegrasJogo = do
  let largura = terminalWidth
  putStrLn $ replicate largura '='
  putStrLn $ centralizar largura "üìò Regras do PLPlay "
  threadDelay 100000
  putStrLn "üéØ Miss√µes s√£o quizzes sobre temas de cada est√°gio da disciplina PLP."
  threadDelay 10000
  putStrLn "üîí Miss√µes s√£o desbloqueadas uma por vez ‚Äî conclua uma para liberar a pr√≥xima!"
  threadDelay 10000
  putStrLn "‚ùó Limite de erros por miss√£o:"
  threadDelay 10000
  putStrLn "    üü¢ F√°cil: at√© 3 erros"
  threadDelay 10000
  putStrLn "    üü° M√©dio: at√© 2 erros"
  threadDelay 10000
  putStrLn "    üî¥ Dif√≠cil: 1 erro"
  threadDelay 10000
  putStrLn "üí• Se ultrapassar o limite, a miss√£o reinicia do zero"
  threadDelay 10000
  putStrLn "üèÜ Ven√ßa chef√µes e conquiste medalhas com seu desempenho"
  threadDelay 10000
  putStrLn "üìö Revise perguntas erradas no modo Treino (flashcards)"
  threadDelay 10000
  putStrLn "üìà Aprenda jogando e avance at√© o final da jornada!"
  threadDelay 10000
  putStrLn $ replicate largura '='