id_questao,missao,pergunta,alternativa_Certa,texto alternativa_a,texto alternativa_b,texto alternativa_c,texto alternativa_d,texto alternativa_e,texto_alternativa_certa
"M1_Q01",1,"De acordo com o material, qual é o nome completo do professor responsável pela disciplina?","b","Everton L. G. Ribeiro.","Everton L. G. Alves.","Everton G. Alves.","Everton L. Alves.","Everton de G. Alves.","Everton L. G. Alves."
"M1_Q02",1,"Em que universidade o professor Everton L. G. Alves obteve sua graduação, mestrado e doutorado?","c","Universidade de São Paulo (USP).","University of Texas in Austin.","Universidade Federal de Campina Grande (UFCG).","Universidade Estadual da Paraíba (UEPB).","Massachusetts Institute of Technology (MIT).","Universidade Federal de Campina Grande (UFCG)."
"M1_Q03",1,"Segundo a definição apresentada no material, o que é um ""paradigma""?","d","Uma técnica de programação avançada.","Um tipo de linguagem de programação.","Um método de avaliação de software.","Um modelo ou padrão a ser seguido.","Um conjunto de regras gramaticais de uma linguagem.","Um modelo ou padrão a ser seguido."
"M1_Q04",1,"Qual é o nome completo da disciplina apresentada?","c","Princípios de Linguagens de Programação.","Programação de Linguagens Puras.","Paradigmas de Linguagens de Programação.","Programação Lógica e Funcional.","Plataformas de Linguagens de Programação.","Paradigmas de Linguagens de Programação."
"M1_Q05",1,"Na analogia dos macacos, o que acontecia toda vez que um macaco tentava subir na escada?","a","Jorrava água gelada sobre os demais macacos.","Ele era premiado com bananas.","Ele era isolado dos outros macacos.","A gaiola era aberta.","Os cientistas removiam a escada.","Jorrava água gelada sobre os demais macacos."
"M1_Q06",1,"No experimento dos macacos, o que a comunidade de macacos passou a fazer para evitar o castigo?","b","Eles trabalharam em equipe para pegar as bananas.","Eles espancavam qualquer macaco que tentasse subir na escada.","Eles se esconderam do dispositivo de água.","Eles sabotaram a escada.","Eles criaram uma nova escada.","Eles espancavam qualquer macaco que tentasse subir na escada."
"M1_Q07",1,"Qual o principal objetivo da disciplina, conforme o material?","e","Aprender a programar em Haskell.","Dominar apenas os paradigmas Python e Java.","Criar projetos de software complexos.","Analisar a história das linguagens de programação.","Estudar os principais conceitos e paradigmas que dão origem a diferentes estilos de programação.","Estudar os principais conceitos e paradigmas que dão origem a diferentes estilos de programação."
"M1_Q08",1,"O que o ""Paradigma Cartesiano"" se baseia?","a","Na visão mecanicista do conhecimento, dividindo o todo em partes.","No uso de linguagens de programação declarativas.","Na união de todas as partes para entender o todo.","Na visão puramente funcional da programação.","No artigo 461 da CLT.","Na visão mecanicista do conhecimento, dividindo o todo em partes."
"M1_Q09",1,"Qual é a principal função dos paradigmas de linguagens de programação?","b","Definir a sintaxe de uma linguagem.","Guiar o design das linguagens de programação.","Determinar a velocidade de execução do código.","Avaliar o desempenho de um programador.","Organizar a equipe de desenvolvimento.","Guiar o design das linguagens de programação."
"M1_Q10",1,"De acordo com o material, por que é importante estudar paradigmas de linguagens de programação?","d","Porque todas as linguagens de programação seguem o mesmo paradigma.","Para focar apenas em linguagens populares como Python e Java.","Para provar que já se sabe programar.","Para aumentar o arsenal de ferramentas para resolver problemas e atender às exigências do mercado.","Porque o mercado tem exigido que os desenvolvedores dominem apenas um paradigma.","Para aumentar o arsenal de ferramentas para resolver problemas e atender às exigências do mercado."
"M1_Q11",1,"Qual dos seguintes paradigmas não é mencionado no slide ""Paradigmas"" do material?","a","Programação Estruturada.","Funcional.","Lógico.","Concorrente.","Imperativo.","Programação Estruturada."
"M1_Q12",1,"O que o material sugere para uma boa performance na disciplina?","c","Estudar apenas na véspera das provas.","Faltar às aulas para ter mais tempo de estudo.","Procurar não faltar e ter estudo contínuo.","Fazer todos os exercícios sem afinco.","Confiar apenas no conhecimento do colega.","Procurar não faltar e ter estudo contínuo."
"M1_Q13",1,"Em Haskell, o que significa a característica de ""non-strict semantics""?","d","A linguagem é fracamente tipada.","A sintaxe é baseada em protótipos.","As funções podem ter efeitos colaterais.","A avaliação é preguiçosa (lazy evaluation).","A linguagem não possui classes de tipos.","A avaliação é preguiçosa (lazy evaluation)."
"M1_Q14",1,"Qual das seguintes linguagens é mencionada como seguindo primariamente os paradigmas orientados a objetos e imperativo, mas também com aspectos de programação funcional?","a","Python.","Haskell.","JavaScript.","C.","Java.","Python."
"M1_Q15",1,"Qual é a metodologia de ensino da disciplina?","e","Apenas exercícios teóricos.","Apenas aulas práticas.","Fazer uma prova única no final do semestre.","Um projeto individual sem orientação.","Aulas expositivas, exercícios práticos (quizzes e práticas) e um projeto.","Aulas expositivas, exercícios práticos (quizzes e práticas) e um projeto."
"M1_Q16",1,"No contexto da disciplina, o projeto deve ser desenvolvido em quantas etapas de entrega e em quais paradigmas?","c","Uma única etapa, no paradigma imperativo.","Duas etapas, no paradigma funcional e orientada a objetos.","Duas etapas, nos paradigmas funcional e lógico.","Três etapas, nos paradigmas imperativo, funcional e lógico.","Uma única etapa, no paradigma lógico.","Duas etapas, nos paradigmas funcional e lógico."
"M1_Q17",1,"De acordo com o material, quantos alunos devem compor cada grupo para o projeto?","b","2 pessoas.","4 pessoas.","5 pessoas.","3 pessoas.","6 pessoas.","4 pessoas."
"M1_Q18",1,"Qual a porcentagem da nota 1 que corresponde à mini-prova?","a","80%.","20%.","50%.","35%.","15%.","80%."
"M1_Q19",1,"O que é a """Avaliação Preguiçosa""" (lazy evaluation), característica do Haskell?","a","Uma forma de a linguagem ignorar erros de recursão.","Um recurso que força a execução de todas as chamadas de uma vez.","Um mecanismo que garante que a função retorne um valor inteiro.","Um recurso que permite à linguagem trabalhar com listas infinitas, avaliando apenas o necessário.","Uma característica que permite a criação de variáveis mutáveis.","Um recurso que permite à linguagem trabalhar com listas infinitas, avaliando apenas o necessário."
"M1_Q20",1,"Qual a diferença entre os tipos `Int` e `Integer` em Haskell, segundo o material?","d","`Int` é usado para números de ponto flutuante e `Integer` para inteiros.","`Integer` é um tipo de dados mais antigo e obsoleto.","`Int` é para inteiros de precisão fixa, enquanto `Integer` é para inteiros de precisão arbitrária.","Essa informação não é abordada no material fornecido.","Não há diferença entre os dois tipos.","Essa informação não é abordada no material fornecido."
"M2_Q01",2,"De acordo com o material, qual é a principal característica da programação funcional que a distingue da imperativa?","c","O uso de variáveis mutáveis.","A modificação do estado de variáveis.","A ausência de mudança de estado, baseada em funções matemáticas.","O uso de laços de repetição.","A sintaxe similar a linguagens como C e Java.","A ausência de mudança de estado, baseada em funções matemáticas."
"M2_Q02",2,"Em Haskell, o que representa a notação `(a:as)` em um casamento de padrões para listas?","b","`a` é o último elemento e `as` é o restante da lista.","`a` é a cabeça (primeiro elemento) e `as` é a cauda (corpo) da lista.","`a` é a lista completa e `as` é um elemento da lista.","`a` é um contador e `as` é o resultado final.","`a` e `as` são listas separadas.","`a` é a cabeça (primeiro elemento) e `as` é a cauda (corpo) da lista."
"M2_Q03",2,"Qual é o nome da função em Haskell que retorna o primeiro elemento de uma lista?","d","`tail`.","`last`.","`drop`.","`head`.","`length`.","`head`."
"M2_Q04",2,"O que a expressão `[1, 3..7]` em Haskell resulta?","a","Uma lista com os números [1, 3, 5, 7].","Uma lista com os números [1, 2, 3, 4, 5, 6, 7].","Um erro de sintaxe.","Uma lista vazia.","O número 7.","Uma lista com os números [1, 3, 5, 7]."
"M2_Q05",2,"Em Haskell, por que a cláusula `else` é obrigatória em uma expressão `if-then-else`?","b","Porque a sintaxe da linguagem exige uma estrutura completa.","Porque o `if` em Haskell é uma expressão que deve retornar um valor em qualquer caso.","Para evitar erros de compilação.","Apenas por uma questão de boa prática de programação.","Não é obrigatória, a cláusula `else` pode ser omitida.","Porque o `if` em Haskell é uma expressão que deve retornar um valor em qualquer caso."
"M2_Q06",2,"O que são as cláusulas `where`, de acordo com o material?","e","Condições para que a função seja executada.","Um tipo de `if-then-else` simplificado.","Variáveis globais que podem ser modificadas.","Comandos de atribuição.","Estruturas para definir valores ou funções locais, evitando repetição de código.","Estruturas para definir valores ou funções locais, evitando repetição de código."
"M2_Q07",2,"Qual das seguintes opções descreve a característica de ""avaliação preguiçosa"" (lazy evaluation) do Haskell?","d","A linguagem avalia todas as expressões imediatamente.","A linguagem ignora erros de recursão.","O compilador otimiza o código antes da execução.","A linguagem avalia as expressões apenas quando seus resultados são necessários, permitindo listas infinitas.","A linguagem força o programador a definir todos os tipos explicitamente.","A linguagem avalia as expressões apenas quando seus resultados são necessários, permitindo listas infinitas."
"M2_Q08",2,"O que é um ""casamento de padrões"" (pattern matching) em Haskell?","a","Um método de ordenação de dados em uma lista.","Uma forma de verificar se uma condição é verdadeira ou falsa.","Uma sequência de padrões que é usada para escolher entre diferentes definições de uma função.","Uma maneira de declarar múltiplas variáveis.","A atribuição de um valor a uma variável.","Uma sequência de padrões que é usada para escolher entre diferentes definições de uma função."
"M2_Q09",2,"Em Haskell, como uma função que recebe um `Int` e retorna um `Bool` é prototipada?","c","`funcao :: Int`","`funcao -> Int Bool`","`funcao :: Int -> Bool`","`funcao = Int -> Bool`","`funcao : Int -> Bool`","`funcao :: Int -> Bool`"
"M2_Q10",2,"Qual dos seguintes tipos de dados é de precisão arbitrária em Haskell?","b","`Int`","`Integer`","`Float`","`Double`","`Char`","`Integer`"
"M2_Q11",2,"O que a expressão `[x*2 | x <- [1..5], odd x]` resulta em Haskell?","d","Uma lista com todos os números ímpares de 1 a 5.","Uma lista com os quadrados dos números ímpares de 1 a 5.","Uma lista com o dobro de todos os números de 1 a 5.","Uma lista com o dobro dos números ímpares de 1 a 5, que é `[2, 6, 10]`.","Uma lista vazia.","Uma lista com o dobro dos números ímpares de 1 a 5, que é `[2, 6, 10]`."
"M2_Q12",2,"O que é uma função de ordem superior (higher-order function)?","a","Uma função que recebe apenas um argumento e retorna um valor.","Uma função que não pode receber outras funções como argumento.","Uma função que tem apenas um tipo de retorno.","Uma função que pode receber outras funções como argumentos ou retornar uma função como resultado.","Uma função que sempre retorna um valor booleano.","Uma função que pode receber outras funções como argumentos ou retornar uma função como resultado."
"M2_Q13",2,"No material, a função `map` é um exemplo de função de ordem superior. Qual sua finalidade?","c","Remover elementos de uma lista que não satisfazem uma condição.","Acumular todos os elementos de uma lista em um único valor.","Aplicar uma função a cada elemento de uma lista e retornar uma nova lista com os resultados.","Reverter a ordem dos elementos em uma lista.","Filtrar elementos de uma lista que são pares.","Aplicar uma função a cada elemento de uma lista e retornar uma nova lista com os resultados."
"M2_Q14",2,"O que são as funções `lambda` em Haskell?","b","Funções que só podem ser usadas para loops.","Funções anônimas, sem nome, frequentemente usadas como argumentos para funções de ordem superior.","Funções que sempre retornam uma lista vazia.","Funções que sempre recebem dois argumentos.","Funções que são nomeadas com a palavra-chave `lambda`.","Funções anônimas, sem nome, frequentemente usadas como argumentos para funções de ordem superior."
"M2_Q15",2,"Qual das seguintes funções utilitárias é usada para remover uma quantidade x de elementos do início de uma lista?","e","`take`","`head`","`reverse`","`length`","`drop`","`drop`"
"M2_Q16",2,"Qual a função da `list comprehension` (compreensão de lista) em Haskell?","c","Criar um loop infinito sobre uma lista.","Apenas criar listas com progressões aritméticas.","Permitir a criação concisa de listas a partir de outras listas, com filtros e transformações.","Sempre retornar uma lista vazia.","Permitir a criação de uma lista com elementos de tipos diferentes.","Permitir a criação concisa de listas a partir de outras listas, com filtros e transformações."
"M2_Q17",2,"No contexto de uma função recursiva sobre listas, o que representa o caso base?","d","A parte da função que se chama novamente.","A parte da função que lida com o erro.","A condição que verifica se a lista está cheia.","A condição de parada, geralmente para uma lista vazia, que retorna um valor sem fazer uma chamada recursiva.","A parte da função que adiciona um elemento no final da lista.","A condição de parada, geralmente para uma lista vazia, que retorna um valor sem fazer uma chamada recursiva."
"M2_Q18",2,"O que acontece se uma função recursiva não tiver um caso base adequado?","a","A função entra em um loop infinito ou gera um erro de pilha (stack overflow).","O compilador de Haskell corrige o erro automaticamente.","A função retorna um valor nulo.","O programa continua a execução normalmente.","A função sempre retorna 0.","A função entra em um loop infinito ou gera um erro de pilha (stack overflow)."
"M2_Q19",2,"Qual dos seguintes tipos de dados não é um tipo primitivo em Haskell?","e","Bool.","Int.","Char.","Float.","Listas.","Listas."
"M2_Q20",2,"De acordo com o material, qual das seguintes afirmações sobre a linguagem Haskell é verdadeira?","b","Haskell não permite a criação de listas infinitas.","Haskell é estaticamente e fortemente tipada.","Haskell permite o uso de variáveis mutáveis.","Haskell é uma linguagem puramente imperativa.","Haskell possui uma sintaxe baseada em C e Java.","Haskell é estaticamente e fortemente tipada."  
"M3_Q01",3,"De acordo com o material, como são classificadas as linguagens que são voltadas para a máquina e usam instruções do microprocessador?","a","Linguagens de baixo nível.","Linguagens de alto nível.","Linguagens de programação imperativas.","Linguagens Assembly modernas.","Linguagens de nível intermediário.","Linguagens de baixo nível."
"M3_Q02",3,"O que caracteriza as linguagens de alto nível?","c","Elas dependem da arquitetura do computador.","Elas utilizam apenas o paradigma imperativo.","Elas utilizam sintaxe mais estruturada, facilitando o entendimento e edição dos programas.","Elas não necessitam de um tradutor para a máquina.","Elas são escritas utilizando as instruções do microprocessador.","Elas utilizam sintaxe mais estruturada, facilitando o entendimento e edição dos programas."
"M3_Q03",3,"Qual dos seguintes não é um paradigma de linguagem de programação mencionado no fluxograma do material?","d","Declarativo.","Imperativo.","Orientado a objetos.","Paralelo.","Funcional.","Paralelo."
"M3_Q04",3,"Qual das seguintes linguagens é citada como exemplo de paradigma imperativo?","c","Lisp.","Haskell.","C.","Prolog.","Eiffel.","C."
"M3_Q05",3,"O que caracteriza o paradigma funcional, de acordo com o material?","b","Estado e atribuição.","Função, aplicação e avaliação.","Relação e dedução.","Objeto e mensagem.","Processo e comunicação.","Função, aplicação e avaliação."
"M3_Q06",3,"Quais paradigmas compõem a linguagem C++, de acordo com o material?","a","Imperativo, Orientado a Objetos e Concorrente.","Apenas Orientado a Objetos.","Funcional e Orientado a Objetos.","Apenas Imperativo.","Imperativo e Funcional.","Imperativo, Orientado a Objetos e Concorrente."
"M3_Q07",3,"Qual é a principal desvantagem da interpretação, conforme o material?","b","Falta de portabilidade.","Problemas com eficiência e maior consumo de memória.","Dificuldade para prototipação.","Problemas com depuração.","A sintaxe ser complexa.","Problemas com eficiência e maior consumo de memória."
"M3_Q08",3,"O que uma linguagem de programação ""implementável"" deve ser?","d","Capaz de ser executada diretamente na máquina.","Uma linguagem interpretada.","Uma linguagem com sintaxe simples.","Passível de tradução para um formalismo que seja executável em uma máquina.","Uma linguagem que suporta múltiplos paradigmas.","Passível de tradução para um formalismo que seja executável em uma máquina."
"M3_Q09",3,"O que é a sintaxe de uma linguagem de programação?","e","O significado de um programa.","O comportamento de um programa em tempo de execução.","O conjunto de regras que definem o estado do programa.","A tradução de um programa para linguagem de máquina.","O formato do programa, ou seja, como as construções devem ser arranjadas.","O formato do programa, ou seja, como as construções devem ser arranjadas."
"M3_Q10",3,"O que a semântica de uma linguagem de programação descreve?","c","O formato de um programa.","A performance de um programa.","O significado de um programa.","A velocidade de compilação.","A portabilidade do programa.","O significado de um programa."
"M3_Q11",3,"Qual das seguintes frases sintaticamente corretas é citada como semanticamente incorreta no material?","a","""João é um solteiro casado"".","""A bola azul"".","""A mesa está no chão"".","""O sol é quente"".","""Cachorro latem muito"".","""João é um solteiro casado""."
"M3_Q12",3,"Como a sintaxe de um programa é verificada?","d","Somente em tempo de execução.","Através de testes.","Pela semântica do programa.","Com o uso de compiladores.","Por um interpretador.","Com o uso de compiladores."
"M3_Q13",3,"O que a Forma de Backus Naur (BNF) é usada para definir?","a","A sintaxe de uma linguagem.","A semântica de uma linguagem.","O comportamento de um programa.","A eficiência de um programa.","A portabilidade do código.","A sintaxe de uma linguagem."
"M3_Q14",3,"Qual é a principal vantagem da compilação, de acordo com o material?","e","Portabilidade.","Facilidade de prototipação.","Facilidade de depuração.","Menor consumo de memória.","Eficiência.","Eficiência."
"M3_Q15",3,"Na fase de Análise Léxica de um compilador, o que o código fonte é transformado?","a","Em linguagem de máquina.","Em uma árvore abstrata.","Em uma sequência de caracteres.","Em um programa executável.","Em um conjunto de tokens.","Em um conjunto de tokens."
"M3_Q16",3,"Qual é o nome da fase de compilação que cria uma árvore abstrata a partir da gramática da LP?","d","Análise Léxica.","Análise Semântica.","Otimização de código.","Análise Sintática.","Tradução para linguagem intermediária.","Análise Sintática."
"M3_Q17",3,"O que um compilador faz?","b","Executa o programa diretamente.","Traduz um programa fonte para um programa objeto semanticamente equivalente.","Apenas verifica a sintaxe de um programa.","Apenas interpreta o código em tempo de execução.","Gera um código intermediário que não precisa ser traduzido.","Traduz um programa fonte para um programa objeto semanticamente equivalente."
"M3_Q18",3,"No caso de linguagens interpretadas como Java e C#, o que é a linguagem intermediária gerada a partir do código fonte?","c","Linguagem de máquina.","Linguagem Assembly.","Bytecode.","Código executável.","Linguagem de alto nível.","Bytecode."
"M3_Q19",3,"O que significa um programa ser ""sintaticamente correto"" mas ""semânticamente incorreto""?","b","Que ele não pode ser compilado.","Que ele pode ser gramaticalmente correto, mas expressa um significado que não pode ser verdadeiro.","Que ele não pode ser executado.","Que ele não é portável.","Que a semântica do programa melhora a legibilidade.","Que ele pode ser gramaticalmente correto, mas expressa um significado que não pode ser verdadeiro."
"M3_Q20",3,"Qual dos seguintes pares de linguagens são citados como sendo sintaticamente diferentes mas semanticamente idênticos para um determinado trecho de código?","a","Pascal e C.","Python e Java.","Haskell e C++.","Lisp e Prolog.","C# e Python.","Pascal e C."  
"M4_Q01",4,"O que é um ""valor"" em programação, de acordo com a definição apresentada no material?","e","Um conjunto de dados para processamento.","Um tipo de dado que pode ser decomposto.","Um erro que ocorre durante a execução.","Um comando que altera o estado do programa.","Qualquer entidade que pode ser manipulada por um programa.","Qualquer entidade que pode ser manipulada por um programa."
"M4_Q02",4,"Qual é a principal diferença entre um valor de ""primeira classe"" e um de ""segunda classe""?","a","Valores de primeira classe não têm restrições de uso, enquanto os de segunda classe têm.","Valores de segunda classe são mais eficientes.","Valores de primeira classe podem ser decompostos, enquanto os de segunda classe não.","Valores de primeira classe só podem ser passados como argumentos.","Valores de segunda classe só podem ser retornados de funções.","Valores de primeira classe não têm restrições de uso, enquanto os de segunda classe têm."
"M4_Q03",4,"De acordo com o material, qual das seguintes linguagens não possui um tipo booleano primitivo e usa a convenção de que 0 representa falso?","c","Java.","Ada.","C.","Python.","Haskell.","C."
"M4_Q04",4,"O que é um ""tipo"" na programação, conforme a definição mais precisa do material?","d","Uma variável que armazena um valor.","Qualquer conjunto de valores.","Uma forma de organizar dados.","Um conjunto de valores equipado com um conjunto de operações.","A sintaxe de uma linguagem.","Um conjunto de valores equipado com um conjunto de operações."
"M4_Q05",4,"Um tipo cujos valores são atômicos e impossíveis de decompor é classificado como:","a","Tipo primitivo.","Tipo composto.","Tipo recursivo.","Tipo de primeira classe.","Tipo de segunda classe.","Tipo primitivo."
"M4_Q06",4,"Qual dos seguintes não é um tipo composto mencionado no material?","e","Tuplas.","Arrays.","Uniões.","Objetos.","Inteiros.","Inteiros."
"M4_Q07",4,"Em um produto cartesiano, o que é agrupado?","b","Apenas valores de tipos idênticos.","Valores de vários tipos (possivelmente diferentes) em tuplas.","Funções e arrays.","Apenas valores de tipo primitivo.","Nenhum valor é agrupado.","Valores de vários tipos (possivelmente diferentes) em tuplas."
"M4_Q08",4,"Qual é a principal diferença entre um tipo ""monomórfico"" e um ""polimórfico""?","c","Monomorfismo diminui a flexibilidade, enquanto polimorfismo a aumenta.","Monomorfismo facilita a verificação de tipos, enquanto polimorfismo não.","Monomorfismo associa um tipo específico a uma entidade, enquanto polimorfismo permite que a abstração atue sobre múltiplos tipos.","Monomorfismo é usado em linguagens fracamente tipadas, polimorfismo em fortemente tipadas.","Não há diferença significativa.","Monomorfismo associa um tipo específico a uma entidade, enquanto polimorfismo permite que a abstração atue sobre múltiplos tipos."
"M4_Q09",4,"O que caracteriza o polimorfismo do tipo ""ad-hoc""?","d","A abstração atua uniformemente sobre uma família de tipos.","É sinônimo de herança.","A função é identificada pelo tipo do retorno.","A abstração atua sobre um número finito de tipos não relacionados, mas se comporta diferentemente dependendo do tipo.","Ele permite a criação de código genérico.","A abstração atua sobre um número finito de tipos não relacionados, mas se comporta diferentemente dependendo do tipo."
"M4_Q10",4,"Qual tipo de polimorfismo ocorre quando um identificador é aplicável a mais de uma operação, e o compilador consegue distinguir a operação a ser chamada usando somente informações de tipo?","a","Sobrecarga.","Coerção.","Inclusão.","Paramétrico.","Universal.","Sobrecarga."
"M4_Q11",4,"O que é a ""coerção"" no contexto de sistemas de tipos?","b","Um tipo de polimorfismo ad-hoc.","Uma conversão implícita de tipo realizada automaticamente pelo compilador.","A redefinição de um método em uma subclasse.","Um tipo de casting explícito.","A identificação da função pelo tipo do parâmetro.","Uma conversão implícita de tipo realizada automaticamente pelo compilador."
"M4_Q12",4,"Qual o principal conceito por trás do polimorfismo de ""inclusão""?","e","Herança múltipla.","Interfaces.","Funções genéricas.","Sobrecarga de operadores.","Um tipo pode ter subtipos que herdam suas características.","Um tipo pode ter subtipos que herdam suas características."
"M4_Q13",4,"No polimorfismo universal, uma única abstração atua de maneira uniforme sobre uma família de tipos. Qual das seguintes opções é um exemplo desse tipo de polimorfismo?","d","Sobrecarga.","Coerção.","Subtipo.","Paramétrico.","Herança.","Paramétrico."
"M4_Q14",4,"O que é um sistema de tipo ""fortemente tipado""?","b","Um sistema que permite conversão implícita de tipos.","Um sistema que é mais propenso a gerar erros ou não compilar quando os tipos esperados não correspondem.","Um sistema onde o tipo de uma variável pode mudar dinamicamente.","Um sistema que não exige a declaração de tipos para variáveis.","Um sistema que usa coerção extensivamente.","Um sistema que é mais propenso a gerar erros ou não compilar quando os tipos esperados não correspondem."
"M4_Q15",4,"Em uma linguagem com tipagem estática, o que determina o tipo das expressões?","c","A execução do programa.","Apenas os valores que a expressão pode assumir.","O tempo de compilação.","O tipo de retorno da função onde a expressão se encontra.","O tipo de dado de uma variável.","O tempo de compilação."
"M4_Q16",4,"Qual das seguintes linguagens é citada como sendo forte e dinamicamente tipada?","a","Python.","C.","Java.","JavaScript.","Haskell.","Python."
"M4_Q17",4,"Em Java, um exemplo de sobrecarga independente de contexto é:","e","O operador `+` para inteiros.","A divisão de ponto flutuante por inteiros.","O uso de `break` em um loop.","A redefinição de um método em uma subclasse.","A definição de dois métodos com o mesmo nome, mas com tipos de parâmetros diferentes.","A definição de dois métodos com o mesmo nome, mas com tipos de parâmetros diferentes."
"M4_Q18",4,"Qual a desvantagem do uso irrestrito de coerção?","d","Aumento da verbosidade do código.","Obriga o programador a declarar todos os tipos de forma explícita.","Melhora a legibilidade.","Pode levar a resultados inesperados e erros difíceis de depurar.","Melhora o desempenho do programa.","Pode levar a resultados inesperados e erros difíceis de depurar."
"M4_Q19",4,"O que a herança caracteriza, de acordo com o material?","a","Apenas uma relação entre implementações para reuso de código.","Sempre uma relação de subtipagem.","Uma forma de polimorfismo universal.","Um tipo de coerção.","Um tipo de polimorfismo ad-hoc.","Apenas uma relação entre implementações para reuso de código."
"M4_Q20",4,"O que o polimorfismo paramétrico permite, de acordo com o material?","b","Que o código seja escrito de forma monomórfica.","Que uma abstração possa ser escrita de forma genérica, tratando valores sem considerar o tipo específico.","Apenas o uso de herança.","A sobrecarga de operadores.","A conversão implícita de tipos.","Que uma abstração possa ser escrita de forma genérica, tratando valores sem considerar o tipo específico."
"M5_Q01",5,"De acordo com o material, qual arquitetura de computadores exerceu um efeito crucial sobre o projeto das linguagens de programação imperativas?","c","Arquitetura de Harvard.","Arquitetura de Babbage.","Arquitetura de von Neumann.","Arquitetura de Princeton.","Arquitetura de Turing.","Arquitetura de von Neumann."
"M5_Q02",5,"Na programação imperativa, o que as variáveis modelam?","b","As instruções da CPU.","As células de memória.","Os sistemas de entrada e saída.","A unidade de controle.","Os registradores.","As células de memória."
"M5_Q03",5,"O que são variáveis ""persistentes"" segundo a classificação do material?","a","Variáveis que têm existência independente do tempo de vida de um programa, como arquivos.","Variáveis que são criadas e usadas dentro de um programa.","Variáveis que armazenam valores de tipos primitivos.","Variáveis que armazenam valores de tipos compostos.","Variáveis que são alocadas na Stack.","Variáveis que têm existência independente do tempo de vida de um programa, como arquivos."
"M5_Q04",5,"Qual tipo de variável é alocada dinamicamente, podendo ser criada e destruída a qualquer instante?","e","Variáveis primitivas.","Variáveis temporárias.","Variáveis estáticas.","Variáveis da Stack.","Variáveis da Heap.","Variáveis da Heap."
"M5_Q05",5,"O que é um ""dangling reference"" (referência solta)?","c","Um apontador que nunca foi inicializado.","Uma variável que aponta para um endereço de memória válido.","Um apontador para uma variável heap que já foi desalocada.","Um tipo de dado primitivo.","Um erro de compilação.","Um apontador para uma variável heap que já foi desalocada."
"M5_Q06",5,"No contexto de escopo, o que define o ""tempo de vida"" de uma variável?","b","A parte do programa onde a variável pode ser acessada.","O intervalo de tempo entre sua criação e sua destruição.","A sua declaração no início da execução.","O escopo do bloco onde ela está.","O tamanho da variável.","O intervalo de tempo entre sua criação e sua destruição."
"M5_Q07",5,"Em linguagens com escopo léxico, o que determina o escopo de uma variável?","a","A estrutura textual do programa.","A ordem de execução das rotinas.","A linha de execução do programa.","O valor da variável em tempo de execução.","O tamanho do programa.","A estrutura textual do programa."
"M5_Q08",5,"Qual das seguintes alternativas descreve a diferença entre expressões e comandos, de acordo com o material?","e","Expressões modificam estados, comandos lêem estados.","Não há diferença entre eles.","Ambos modificam estados, mas de formas diferentes.","Expressões são sempre booleanas, comandos não.","Expressões lêem estados e computam valores, enquanto comandos modificam estados.","Expressões lêem estados e computam valores, enquanto comandos modificam estados."
"M5_Q09",5,"Qual dos seguintes não é um tipo fundamental de comando mencionado no material?","c","Atribuições.","Chamadas de Procedimento.","Comandos Recursivos.","Comandos condicionais.","Comandos iterativos.","Comandos Recursivos."
"M5_Q10",5,"O que caracteriza um comando ""colateral""?","a","Um conjunto de comandos executados sem uma ordem particular, ou seja, não determinísticos.","Um comando que é executado após o término de outro.","Um comando que transfere o controle para outro ponto do programa.","Um comando que repete a execução de um conjunto de instruções.","Um comando que é sempre determinístico.","Um conjunto de comandos executados sem uma ordem particular, ou seja, não determinísticos."
"M5_Q11",5,"O que a Transparência Referencial em uma linguagem de programação significa?","d","Que a linguagem é estritamente tipada.","Que as funções podem ter efeitos colaterais.","Que qualquer comando pode ser substituído por outro.","Que qualquer expressão pode ser substituída por outra de mesmo valor sem impacto (ausência de efeitos colaterais).","Que a linguagem permite o uso irrestrito de Jumps.","Que qualquer expressão pode ser substituída por outra de mesmo valor sem impacto (ausência de efeitos colaterais)."
"M5_Q12",5,"Por que, de acordo com o material, as linguagens imperativas não garantem a transparência referencial?","a","Porque a avaliação de uma expressão pode alterar o estado de variáveis.","Porque elas usam alocação de memória estática.","Porque os comandos iterativos não são determinísticos.","Porque as chamadas de procedimento não têm efeitos colaterais.","Porque o escopo é sempre léxico.","Porque a avaliação de uma expressão pode alterar o estado de variáveis."
"M5_Q13",5,"Qual das desvantagens de expressões com efeitos colaterais é mencionada no material?","d","Aumento da concisão.","Maior reusabilidade do código.","Fácil entendimento da semântica.","Perda de legibilidade e baixa reusabilidade.","Diminuição da dependência de um contexto global.","Perda de legibilidade e baixa reusabilidade."
"M5_Q14",5,"O que é um ""sequenciador""?","e","Um tipo de loop (laço de repetição).","Um comando que é executado sequencialmente.","Um comando que transfere o controle para o próximo comando.","Um comando que garante a ordem de execução.","Uma construção que transfere o controle para outro ponto do programa.","Uma construção que transfere o controle para outro ponto do programa."
"M5_Q15",5,"O que caracteriza um `jump` (salto) em programação?","b","Um comando de única entrada e única saída.","Uma transferência de controle explícita de um ponto para outro do programa.","Um comando que termina a execução de um bloco de código.","Um comando que manipula exceções.","Um comando que é usado apenas para loops.","Uma transferência de controle explícita de um ponto para outro do programa."
"M5_Q16",5,"Qual o problema do uso irrestrito de `jumps`?","a","Gera comandos do tipo múltiplas-entradas e múltiplas-saídas (programas spaghetti).","Melhora a legibilidade e a organização do código.","Evita que um comando seja executado abruptamente.","Torna o código mais conciso.","Aumenta a reusabilidade do código.","Gera comandos do tipo múltiplas-entradas e múltiplas-saídas (programas spaghetti)."
"M5_Q17",5,"Qual é a função de um `escape` (como `break`, `continue` ou `return` em Java)?","c","Garantir que um comando seja sempre executado sequencialmente.","Criar um loop infinito.","Terminar a execução de um comando composto, transferindo o controle para o próximo.","Causar um erro em tempo de execução.","Iniciar a execução de um novo programa.","Terminar a execução de um comando composto, transferindo o controle para o próximo."
"M5_Q18",5,"Quando é gerada uma `exception` (exceção)?","b","Quando o programa termina a sua execução normalmente.","Quando condições anormais ocorrem, como uma divisão por zero.","Quando um loop é executado repetidamente.","Quando um comando é executado sequencialmente.","Quando um `jump` é utilizado.","Quando condições anormais ocorrem, como uma divisão por zero."
"M5_Q19",5,"O que o material define como um programa ""robusto""?","a","Um programa que consegue se recuperar de condições anormais sem encerrar a sua execução.","Um programa que nunca gera erros.","Um programa que é escrito em uma linguagem funcional.","Um programa que é muito rápido.","Um programa que usa alocação de memória estática.","Um programa que consegue se recuperar de condições anormais sem encerrar a sua execução."
"M5_Q20",5,"Na arquitetura de von Neumann, como os dados e as instruções devem ser transportados?","b","Da CPU para a Memória Principal.","Da Memória Principal para a CPU.","Diretamente para os sistemas de Entrada/Saída.","Apenas da ALU para os Registradores.","Eles são armazenados apenas na CPU.","Da Memória Principal para a CPU."
"M6_Q01",6,"Qual a principal característica que diferencia o paradigma funcional do paradigma imperativo?","b","O uso de comandos de atribuição para modificar o estado de variáveis.","A ausência de mudança de estado, baseada em funções matemáticas.","A capacidade de usar laços de repetição como `for` e `while`.","A obrigatoriedade do uso de expressões condicionais como `if/else`.","A presença de variáveis mutáveis.","A ausência de mudança de estado, baseada em funções matemáticas."
"M6_Q02",6,"Em Haskell, como é definida a prototipação de tipos para uma função?","a","Uma sequência dos tipos dos argumentos, seguida do tipo do valor de retorno.","A definição do tipo é opcional, pois a linguagem deduz automaticamente.","Com uma notação de seta (`->`) entre o nome da função e o tipo.","Usando a palavra-chave `type` antes do nome da função.","Não existe prototipação de tipos em Haskell.","Uma sequência dos tipos dos argumentos, seguida do tipo do valor de retorno."
"M6_Q03",6,"O que é a Transparência Referencial no contexto da programação funcional?","b","Um programa funcional é completamente determinado pelas entradas que recebe, sem efeitos colaterais.","A habilidade de uma função modificar o estado de variáveis externas.","A capacidade de se referir a variáveis de outros escopos.","O uso de ponteiros para acessar dados na memória.","A definição de funções que dependem da ordem de execução.","Um programa funcional é completamente determinado pelas entradas que recebe, sem efeitos colaterais."
"M6_Q04",6,"Qual a principal diferença entre os tipos `Int` e `Integer` em Haskell?","c","`Int` é usado para números de ponto flutuante e `Integer` para inteiros.","`Integer` é um tipo de dados mais antigo e obsoleto.","`Int` é para inteiros de precisão fixa, enquanto `Integer` é para inteiros de precisão arbitrária.","`Integer` é um subtipo de `Int`.","Não há diferença entre os dois tipos.","`Int` é para inteiros de precisão fixa, enquanto `Integer` é para inteiros de precisão arbitrária."
"M6_Q05",6,"Em Haskell, por que a cláusula `else` é obrigatória em uma expressão `if-then-else`?","a","Porque o `if` em Haskell é uma expressão que deve retornar um valor em qualquer caso.","Porque a sintaxe da linguagem exige uma estrutura completa.","Para evitar erros de compilação semânticos.","Apenas por uma questão de boa prática de programação.","Não é obrigatória, a cláusula `else` pode ser omitida.","Porque o `if` em Haskell é uma expressão que deve retornar um valor em qualquer caso."
"M6_Q06",6,"Qual é a função da notação `| guarda = expressão` na definição de uma função em Haskell?","d","Para criar um laço de repetição com base em uma condição.","Para definir uma função recursiva.","Para declarar uma variável local dentro da função.","Para estabelecer uma distinção entre casos diferentes na definição de uma função.","Para definir um tipo de dado personalizado.","Para estabelecer uma distinção entre casos diferentes na definição de uma função."
"M6_Q07",6,"Em Haskell, o que significa que uma função é um valor de primeira ordem?","e","Que ela sempre retorna um valor inteiro.","Que ela é a primeira função a ser executada no programa.","Que seu nome é sempre escrito em letras maiúsculas.","Que ela não pode ser usada como argumento de outra função.","Que uma função pode ser tratada como qualquer outro valor, como argumentos ou retornos de outras funções.","Que uma função pode ser tratada como qualquer outro valor, como argumentos ou retornos de outras funções."
"M6_Q08",6,"Qual das seguintes opções representa uma característica da linguagem Haskell?","a","Possui avaliação preguiçosa (lazy evaluation) e permite trabalhar com listas infinitas.","Usa comandos de atribuição para modificar o estado de variáveis.","É uma linguagem puramente imperativa.","Sua sintaxe é baseada em C e Java.","Não possui um sistema de dedução automática de tipos.","Possui avaliação preguiçosa (lazy evaluation) e permite trabalhar com listas infinitas."
"M6_Q09",6,"Como um programa Haskell representa a soma dos números de 1 a 10 de forma declarativa?","b","Através de um laço de repetição `for`.","Através da aplicação da função `sum` em uma lista de inteiros `[1..10]`.","Através de um comando de atribuição em uma variável.","Usando uma expressão condicional.","Implementando uma função recursiva que se chama até 10 vezes.","Através da aplicação da função `sum` em uma lista de inteiros `[1..10]`."
"M6_Q10",6,"Qual dos seguintes tipos de dados não é um tipo primitivo em Haskell?","c","Bool.","Int.","Listas.","Char.","String.","Listas."
"M6_Q11",6,"No paradigma funcional, as variáveis são consideradas:","a","Imutáveis.","Mutáveis.","Temporárias.","Globais.","Sempre numéricas.","Imutáveis."
"M6_Q12",6,"O que é um 'casamento de padrões' (pattern matching) na definição de funções?","d","É um método de ordenação de dados em uma lista.","Uma maneira de declarar múltiplas variáveis.","Uma forma de verificar se uma condição é verdadeira ou falsa.","Uma sequência de padrões que é usada para escolher entre diferentes definições de uma função.","A atribuição de um valor a uma variável.","Uma sequência de padrões que é usada para escolher entre diferentes definições de uma função."
"M6_Q13",6,"Em Haskell, qual é o tipo de uma lista que armazena elementos de tipos diferentes?","e","Não é possível criar uma lista com elementos de tipos diferentes, pois listas em Haskell são homogêneas.","`[Any]`","`[Mixed]`","`[Various]`","`HeteroList`","Não é possível criar uma lista com elementos de tipos diferentes, pois listas em Haskell são homogêneas."
"M6_Q14",6,"Qual é a função do operador `++` em Haskell?","c","Ele realiza a soma de dois números inteiros.","Ele concatena o primeiro elemento com o restante da lista.","Ele concatena duas listas.","Ele adiciona um elemento ao final da lista.","Ele remove um elemento da lista.","Ele concatena duas listas."
"M6_Q15",6,"O que a notação `[1, 3..7]` em Haskell resulta?","a","Uma lista com os números [1, 3, 5, 7].","Uma lista com os números [1, 2, 3, 4, 5, 6, 7].","Um erro de sintaxe.","Uma lista vazia.","O número 7.","Uma lista com os números [1, 3, 5, 7]."
"M6_Q16",6,"Qual das seguintes funções utilitárias retorna o primeiro elemento de uma lista?","d","`tail`","`last`","`drop`","`head`","`length`","`head`"
"M6_Q17",6,"Qual a função de um ""guarda"" em uma definição de função em Haskell?","e","Para garantir que a função retorne sempre o mesmo tipo de dado.","Para proteger o código de erros de execução.","Para definir um caso recursivo.","Para declarar o nome da função.","Para escolher entre uma sequência de resultados de mesmo tipo, baseando-se em condições lógicas.","Para escolher entre uma sequência de resultados de mesmo tipo, baseando-se em condições lógicas."
"M6_Q18",6,"O que a expressão `[x^2 | x <- [1..5], even x]` resulta em Haskell?","b","Uma lista com todos os números pares de 1 a 5.","Uma lista com os quadrados dos números pares de 1 a 5.","Uma lista com os quadrados de todos os números de 1 a 5.","Um erro de sintaxe.","Uma lista vazia.","Uma lista com os quadrados dos números pares de 1 a 5."
"M6_Q19",6,"A programação funcional se baseia em qual conceito matemático?","a","Funções matemáticas.","Álgebra linear.","Geometria euclidiana.","Teoria dos conjuntos.","Cálculo diferencial.","Funções matemáticas."
"M6_Q20",6,"Qual é a notação correta em Haskell para uma função que recebe um `Int` e retorna um `Bool`?","c","`funcao :: Int`","`funcao -> Int Bool`","`funcao :: Int -> Bool`","`funcao = Int -> Bool`","`funcao : Int -> Bool`","`funcao :: Int -> Bool`"
"C2_Q01",-2,"Qual a estrutura de uma função recursiva para somar os elementos de uma lista?","c","A função deve usar um laço de repetição `for`.","A função deve modificar o estado de uma variável acumuladora.","A função deve ter um caso base para uma lista vazia e um caso recursivo para uma lista não vazia.","A função deve sempre retornar 0.","A função deve usar a função `sum` em todos os casos.","A função deve ter um caso base para uma lista vazia e um caso recursivo para uma lista não vazia."
"C2_Q02",-2,"No contexto de recursão sobre listas, o que representa o `head` de uma lista?","d","O último elemento da lista.","O tamanho da lista.","A lista completa.","O primeiro elemento da lista.","A cauda da lista.","O primeiro elemento da lista."
"C2_Q03",-2,"Em uma função recursiva que processa uma lista `(a:as)`, o que `a` e `as` representam?","a","`a` é a cabeça da lista e `as` é a cauda (corpo) da lista.","`a` é um contador e `as` é o resultado final.","`a` e `as` são argumentos de tipos diferentes.","`a` é o primeiro elemento e `as` é a soma dos demais.","`a` é um acumulador e `as` é o elemento atual.","`a` é a cabeça da lista e `as` é a cauda (corpo) da lista."
"C2_Q04",-2,"Considerando a função `sumList [] = 0` e `sumList (a:as) = a + sumList as`, qual seria o resultado de `sumList [10]`?","b","0.","10.","1.","[10].","Erro de compilação.","10."
"C2_Q05",-2,"O que acontece se uma função recursiva não tiver um caso base adequado?","a","A função entra em um loop infinito ou gera um erro de pilha (stack overflow).","O compilador de Haskell corrige o erro automaticamente.","A função retorna um valor nulo.","O programa continua a execução normalmente.","A função sempre retorna 0.","A função entra em um loop infinito ou gera um erro de pilha (stack overflow)."
"C2_Q06",-2,"Qual é a definição correta do caso base na recursão?","c","A parte da função que se chama novamente.","O ponto de partida da recursão.","A condição de parada que retorna um valor sem fazer uma chamada recursiva.","A parte da função que lida com o erro.","A condição que verifica se a lista está cheia.","A condição de parada que retorna um valor sem fazer uma chamada recursiva."
"C2_Q07",-2,"Em uma função recursiva para calcular o comprimento de uma lista, qual é o caso base?","e","Quando a lista tem apenas um elemento.","Quando a lista está cheia.","Quando o último elemento é encontrado.","Quando a lista não tem elementos.","Quando a lista está vazia (`[]`), retornando 0.","Quando a lista está vazia (`[]`), retornando 0."
"C2_Q08",-2,"A avaliação preguiçosa (lazy evaluation) é um conceito importante para a recursão em Haskell porque:","d","Permite que a linguagem ignore erros de recursão.","Permite a criação de variáveis mutáveis.","Força a execução de todas as chamadas recursivas de uma vez.","Permite que a linguagem trabalhe com listas infinitas, avaliando apenas o necessário.","Garante que a função sempre retorne um valor inteiro.","Permite que a linguagem trabalhe com listas infinitas, avaliando apenas o necessário."
"C2_Q09",-2,"Como a função `tail` se relaciona com a recursão em listas?","c","Ela retorna o primeiro elemento da lista.","Ela retorna o último elemento da lista.","Ela é usada no passo recursivo para processar o restante da lista.","Ela define o caso base da recursão.","Ela concatena duas listas.","Ela é usada no passo recursivo para processar o restante da lista."
"C2_Q10",-2,"Qual seria a função recursiva em Haskell para calcular o tamanho de uma lista?","b","`length (a:as) = 1 + length (a:as)`","`length [] = 0; length (a:as) = 1 + length as`","`length xs = head xs + tail xs`","`length [] = 1; length (a:as) = length as`","`length xs = 1`","`length [] = 0; length (a:as) = 1 + length as`"
"C2_Q11",-2,"Em uma função recursiva `largest` para encontrar o maior elemento de uma lista, qual o caso base correto?","a","`largest [x] = x`","`largest [] = 0`","`largest (x:xs) = x`","`largest [x,y] = max x y`","`largest xs = head xs`","`largest [x] = x`"
"C2_Q12",-2,"O que a expressão `take 3 [1,2,3,4,5]` resulta?","c","`[4,5]`","`[1,2,3,4,5]`","`[1,2,3]`","`[3,4,5]`","`[1]`","`[1,2,3]`"
"C2_Q13",-2,"Considerando a definição de `sumList` do arquivo, qual a ordem de avaliação para `sumList [1,2]`?","b","`sumList [1,2]` -> `sumList [2]` -> `sumList []` -> `1+2+0`","`sumList [1,2]` -> `1 + sumList [2]` -> `1 + (2 + sumList [])` -> `1 + (2 + 0)` -> `3`","`sumList [1,2]` -> `sumList []` -> `1+2`","`sumList [1,2]` -> `1+2` -> `3`","A ordem de avaliação não é definida em Haskell.","`sumList [1,2]` -> `1 + sumList [2]` -> `1 + (2 + sumList [])` -> `1 + (2 + 0)` -> `3`"
"C2_Q14",-2,"Em Haskell, qual função é usada para pegar a cauda (o restante) de uma lista?","e","`head`","`drop`","`reverse`","`take`","`tail`","`tail`"
"C2_Q15",-2,"O que representa a notação `[n:ns]` em uma definição de função em Haskell?","a","A lista com cabeça `n` e cauda `ns`.","A lista de números inteiros.","A lista de strings.","Um erro de sintaxe.","A lista vazia.","A lista com cabeça `n` e cauda `ns`"
"C2_Q16",-2,"O que acontece ao tentar acessar o `head` de uma lista vazia em Haskell?","e","Retorna 0.","Retorna `null`.","Retorna um valor indefinido.","Retorna um erro de compilação.","Causa um erro em tempo de execução, pois não há cabeça na lista vazia.","Causa um erro em tempo de execução, pois não há cabeça na lista vazia."
"C2_Q17",-2,"Qual das seguintes opções é um exemplo de caso base para uma função recursiva que processa uma lista?","d","`fib 1 = 1`","`factorial n = n * factorial (n-1)`","`length (a:as) = 1 + length as`","`sumList [] = 0`","`largest (x:xs) = x`","`sumList [] = 0`"
"C2_Q18",-2,"Em uma função recursiva, o que é o ""passo recursivo""?","a","É a parte da função que se chama a si mesma com um argumento modificado, geralmente menor.","É a parte da função que retorna um valor constante.","É a primeira linha da definição da função.","É o ponto em que a função para de se chamar.","É a parte da função que lida com listas infinitas.","É a parte da função que se chama a si mesma com um argumento modificado, geralmente menor."
"C2_Q19",-2,"Qual das seguintes funções utilitárias é usada para remover uma quantidade x de elementos do início de uma lista?","e","`take`","`head`","`reverse`","`length`","`drop`","`drop`"
"C2_Q20",-2,"A função `last` em Haskell, que retorna o último elemento de uma lista, pode ser implementada recursivamente. Qual seria a lógica do caso recursivo?","b","Chamar `last` com o `head` da lista.","Chamar `last` com o `tail` da lista até que reste apenas um elemento.","Retornar sempre o primeiro elemento.","Retornar a lista completa.","Usar um laço de repetição.","Chamar `last` com o `tail` da lista até que reste apenas um elemento."
"C1_Q01",-1,"De acordo com o material, qual foi a primeira linguagem de programação de alto nível projetada para o computador IBM 704?","c","COBOL.","Algol.","Fortran.","Lisp.","C.","Fortran."
"C1_Q02",-1,"Qual o conceito de ""paradigma"" que foi discutido na primeira aula?","b","Um método de avaliação de software.","Um modelo ou padrão a ser seguido.","Um conjunto de regras gramaticais de uma linguagem.","Uma técnica de programação avançada.","Um tipo de linguagem de programação.","Um modelo ou padrão a ser seguido."
"C1_Q03",-1,"O que a semântica de uma linguagem de programação descreve?","e","O formato de um programa.","A performance de um programa.","O significado de um programa.","A tradução de um programa para linguagem de máquina.","O formato e significado do programa.","O significado de um programa."
"C1_Q04",-1,"Em linguagens imperativas, qual arquitetura de computadores exerceu um efeito crucial sobre o seu projeto?","d","Arquitetura de Harvard.","Arquitetura de Babbage.","Arquitetura de Turing.","Arquitetura de von Neumann.","Arquitetura de Princeton.","Arquitetura de von Neumann."
"C1_Q05",-1,"Qual das seguintes características NÃO se aplica ao paradigma imperativo?","a","A ausência de mudança de estado.","O uso de comandos para modificar o estado.","O uso de variáveis que modelam células de memória.","A dependência da arquitetura de von Neumann.","O uso de procedimentos para sumarizar sequências de instruções.","A ausência de mudança de estado."
"C1_Q06",-1,"O que caracteriza um sistema de tipos ""fortemente tipado""?","d","Permite coerção entre tipos não relacionados.","Permite o uso de variáveis sem declaração de tipo.","Permite que o tipo de uma variável mude em tempo de execução.","É mais propenso a gerar erros ou não compilar quando os tipos esperados não correspondem.","Utiliza apenas tipos primitivos.","É mais propenso a gerar erros ou não compilar quando os tipos esperados não correspondem."
"C1_Q07",-1,"A linguagem de programação COBOL foi desenvolvida para qual área de aplicação?","a","Aplicações de negócios.","Inteligência artificial.","Cálculo científico.","Sistemas de tempo real.","Programação de sistemas.","Aplicações de negócios."
"C1_Q08",-1,"Qual a principal vantagem da compilação em comparação com a interpretação, de acordo com o material?","b","Portabilidade.","Eficiência.","Facilidade de depuração.","Facilidade de prototipação.","Menor consumo de memória.","Eficiência."
"C1_Q09",-1,"O que é um ""valor de primeira classe""?","c","Qualquer valor que pode ser armazenado em um array.","Um valor de tipo primitivo.","Um valor que pode ser passado como argumento, retornado de uma função e atribuído a uma variável sem restrições.","Um valor que só pode ser passado como argumento.","Um valor que só pode ser retornado de uma função.","Um valor que pode ser passado como argumento, retornado de uma função e atribuído a uma variável sem restrições."
"C1_Q10",-1,"O que a Forma de Backus Naur (BNF) é usada para definir?","e","A semântica de uma linguagem.","O comportamento de um programa.","A eficiência de um programa.","A portabilidade do código.","A sintaxe de uma linguagem.","A sintaxe de uma linguagem."
"C1_Q11",-1,"Qual das seguintes linguagens é citada como sendo multiparadigma e combinando características de imperativa, orientada a objetos e funcional?","a","C++.","Pascal.","Prolog.","Fortran.","Haskell.","C++."
"C1_Q12",-1,"Qual o principal problema do uso irrestrito de `jumps` em programas imperativos?","b","Melhora a legibilidade do código.","Gera comandos do tipo múltiplas-entradas e múltiplas-saídas (programas spaghetti).","Evita que um comando seja executado abruptamente.","Aumenta a reusabilidade do código.","Torna o código mais conciso.","Gera comandos do tipo múltiplas-entradas e múltiplas-saídas (programas spaghetti)."
"C1_Q13",-1,"O que o polimorfismo de ""inclusão"" permite?","c","Que uma função atue sobre um número finito de tipos não relacionados.","Uma conversão implícita de tipo.","Que um tipo possa ter subtipos que herdam suas características.","Uma abstração genérica sobre múltiplos tipos.","A sobrecarga de operadores.","Que um tipo possa ter subtipos que herdam suas características."
"C1_Q14",-1,"Qual tipo de polimorfismo ocorre quando um identificador é aplicável a mais de uma operação e o compilador distingue a operação a ser chamada pelo tipo do parâmetro?","a","Sobrecarga.","Coerção.","Inclusão.","Paramétrico.","Universal.","Sobrecarga."
"C1_Q15",-1,"Em uma linguagem com tipagem estática, o tipo das expressões é determinado em qual momento?","d","Em tempo de execução.","Somente após os testes do programa.","No final da execução.","No tempo de compilação.","No momento da declaração da variável.","No tempo de compilação."
"C1_Q16",-1,"No contexto da compilação, o que a fase de ""Análise Sintática"" faz?","e","Traduz o código fonte para linguagem de máquina.","Gera um programa executável.","Otimiza o código.","Transforma o código em uma sequência de tokens.","Cria uma árvore abstrata a partir da gramática da linguagem.","Cria uma árvore abstrata a partir da gramática da linguagem."
"C1_Q17",-1,"De acordo com o material, qual das seguintes afirmações sobre a linguagem C é verdadeira?","b","Ela possui um tipo booleano primitivo.","Ela não possui um tipo booleano primitivo e usa 0 como falso.","Ela é uma linguagem puramente funcional.","Ela é forte e dinamicamente tipada.","Ela é um exemplo de polimorfismo paramétrico.","Ela não possui um tipo booleano primitivo e usa 0 como falso."
"C1_Q18",-1,"O que são expressões com ""efeitos colaterais""?","c","Expressões que sempre retornam um valor booleano.","Expressões que são avaliadas após um comando.","Expressões que, quando avaliadas, podem alterar o estado do programa.","Expressões que não modificam o estado do programa.","Expressões usadas apenas para laços de repetição.","Expressões que, quando avaliadas, podem alterar o estado do programa."
"C1_Q19",-1,"Qual a principal desvantagem da interpretação?","a","Problemas com eficiência e maior consumo de memória.","Falta de portabilidade.","Dificuldade para prototipação.","Problemas com depuração.","A sintaxe ser complexa.","Problemas com eficiência e maior consumo de memória."
"C1_Q20",-1,"A linguagem Lisp é considerada precursora de qual paradigma de programação?","b","Orientado a objetos.","Funcional.","Lógico.","Imperativo.","Concorrente.","Funcional."
