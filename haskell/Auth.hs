module Auth where

import System.IO
import System.Directory (doesFileExist)
import Control.Monad (when)
import Data.List (isInfixOf)
import qualified Terminal
import System.IO
import System.IO.Unsafe (unsafeDupablePerformIO)
import Control.Concurrent (threadDelay)

terminalSize = unsafeDupablePerformIO Terminal.getTermSize
terminalHeight = fst terminalSize 
terminalWidth = snd terminalSize 

mainAuth :: IO ()
mainAuth = do
    let largura = terminalWidth
    putStrLn $ replicate largura '='
    putStrLn $ centralizar largura "üîê LOGIN/CADASTRO"
    putStrLn $ replicate largura '='
    putStrLn "Digite seu username:"
    username <- getLine
    putStrLn "Digite sua senha:"
    senha <- getLine
    let userData = "username: " ++ username ++ "\nprogresso: Missao3 csharp\n"
    limparTela
    
    exists <- doesFileExist "user.txt"
    if exists
        then do
            content <- readFile "user.txt"
            if ("username: " ++ username) `isInfixOf` content
                then do
                    putStrLn "‚úÖ Autenticado com sucesso!"
                    showMenu
                else do
                    putStrLn "Usu√°rio n√£o encontrado. Cadastrando novo usu√°rio..."
                    mostrarRegrasJogo
                    appendFile "user.txt" userData
                    putStrLn "‚úÖ Cadastro realizado com sucesso!"
                    showMenu
        else do
            appendFile "user.txt" userData
            putStrLn "Primeiro usu√°rio cadastrado com sucesso!"
            showMenu


mostrarRegrasJogo:: IO()
mostrarRegrasJogo = do
  let largura = terminalWidth
  putStrLn $ replicate largura '='
  putStrLn $ centralizar largura "üìò Regras do PLPlay "
  threadDelay 100000
  putStrLn "üéØ Miss√µes s√£o quizzes sobre temas de cada est√°gio da disciplina PLP."
  threadDelay 10000
  putStrLn "üîí Miss√µes s√£o desbloqueadas uma por vez ‚Äî conclua uma para liberar a pr√≥xima!"
  threadDelay 10000
  putStrLn "‚ùó Limite de erros por miss√£o:"
  threadDelay 10000
  putStrLn "    üü¢ F√°cil: at√© 3 erros"
  threadDelay 10000
  putStrLn "    üü° M√©dio: at√© 2 erros"
  threadDelay 10000
  putStrLn "    üî¥ Dif√≠cil: 1 erro"
  threadDelay 10000
  putStrLn "üí• Se ultrapassar o limite, a miss√£o reinicia do zero"
  threadDelay 10000
  putStrLn "üèÜ Ven√ßa chef√µes e conquiste medalhas com seu desempenho"
  threadDelay 10000
  putStrLn "üìö Revise perguntas erradas no modo Treino (flashcards)"
  threadDelay 10000
  putStrLn "üìà Aprenda jogando e avance at√© o final da jornada!"
  threadDelay 10000
  putStrLn $ replicate largura '='
  limparTela

showMenu :: IO ()
showMenu = do
    let largura = terminalWidth
    putStrLn $ replicate largura '='
    putStrLn $ centralizar largura "MENU PRINCIPAL"
    putStrLn $ replicate largura '='
    putStrLn "[1] üéÆ Iniciar Novo Jogo"
    putStrLn "[2] üíæ Continuar Jogo"
    putStrLn "[3] üö™ Sair"
    putStrLn $ replicate largura '='
    putStr "Escolha uma op√ß√£o: "

centralizar :: Int -> String -> String
centralizar largura texto =
    let espacos = replicate ((largura - length texto) `div` 2) ' '
    in espacos ++ texto

limparTela :: IO ()
limparTela = putStr "\ESC[2J\ESC[H"